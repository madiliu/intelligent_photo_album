AWSTemplateFormatVersion: "2010-09-09"
Transform: "AWS::Serverless-2016-10-31"
Description: Intelligent Photo Album
Resources:
  ## ===== IAM Role ===== #
  AllRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com", "codepipeline.amazonaws.com", "lambda.amazonaws.com", "s3.amazonaws.com", "es.amazonaws.com","cloudformation.amazonaws.com"]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: all-policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action: "*"

  # ===== Lambda Functions ===== #
  indexphotos:
    Type: "AWS::Serverless::Function"
    Properties:
      CodeUri: ./index-photo
      Description: "index photos after put action in S3"
      MemorySize: 128
      Timeout: 200
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        S3Trigger:
          Type: S3
          Properties:
            Bucket: !Ref s3photoalbumforbigdataclass
            Events:
              - s3:ObjectCreated:Put
      PackageType: Zip
      #Role: arn:aws:iam::768026748931:role/service-role/index-photos-role-ux055tlz
      Role: !GetAtt AllRole.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - rekognition:*
              Resource: '*'
            - Effect: Allow
              Action:
                - s3:*
                - s3-object-lambda:*
              Resource: '*'
            - Effect: Allow
              Action:
                - es:*
              Resource: '*'
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: arn:aws:logs:us-east-1:768026748931:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents

  searchphotos:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./search-photo
      Description: ''
      MemorySize: 128
      Timeout: 200
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /MyResource
            Method: ANY
        Api2:
          Type: Api
          Properties:
            Path: /search
            Method: GET
      PackageType: Zip
      #Role: !Ref arn:aws:iam::768026748931:role/service-role/search-photos-role-g1w85dak
      Role: !GetAtt AllRole.Arn
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - rekognition:*
              Resource: '*'
            - Effect: Allow
              Action:
                - es:*
              Resource: '*'
            - Sid: VisualEditor0
              Effect: Allow
              Action:
                - lex:CreateUploadUrl
                - lex:ListBuiltInSlotTypes
                - lex:ListBots
                - lex:CreateTestSet
                - lex:ListTestSets
                - lex:ListBuiltInIntents
                - lex:ListImports
                - lex:ListTestExecutions
                - lex:ListExports
              Resource: '*'
            - Sid: VisualEditor1
              Effect: Allow
              Action:
                - lex:*
              Resource:
                - >-
                  arn:aws:lex:us-east-1:768026748931:bot-alias/L4DXTDFTQU/AUMMMGBSRD
                - arn:aws:lex:us-east-1:768026748931:bot/L4DXTDFTQU
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
              Resource: arn:aws:logs:us-east-1:768026748931:*
            - Effect: Allow
              Action:
                - logs:CreateLogStream
                - logs:PutLogEvents

  # ===== API Gateway ===== #
  #ApiGatewayApi:
  #    DependsOn: searchphotos
  #    Type: AWS::Serverless::Api
  #    Properties:
  #      StageName: Prod
  #      # Allows www.example.com to call these APIs
  #      # SAM will automatically add AllowMethods with a list of methods for this API
  #      Cors:
  #        AllowMethods: "*"
  #        AllowHeaders: "*"
  #        AllowOrigin: "*"
  #      DefinitionBody: # Pull in an OpenApi definition from S3
  #        'Fn::Transform':
  #          Name: 'AWS::Include'
  #          Parameters:
  #            Location: s3://hw2-b1-hosting/swagger.yaml

  # ===== Photo Albums ===== #
  s3photoalbumforbigdataclass:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: s3photoalbumforbigdataclass
      PublicAccessBlockConfiguration:
        BlockPublicAcls: False
        BlockPublicPolicy: False
        IgnorePublicAcls: False
        RestrictPublicBuckets: False

  s3photoalbumforbigdataclasspolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref s3photoalbumforbigdataclass
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - s3:*
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref s3photoalbumforbigdataclass
                - /*
            Principal: '*'